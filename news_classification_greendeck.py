# -*- coding: utf-8 -*-
"""News Classification - Greendeck.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mRxXrXim8hXNd4O76zyLuxBnzwidUoFY
"""

import json
import pandas
#json_file = open("C:\\Users\\abhis\\Desktop\\Project\\greendeck\\News_Category_Dataset1.json",'r')

input_file = open ('News_Category_Dataset.json')
data = json.load(input_file)

category_list = ['POLITICS','ENTERTAINMENT','HEALTHY LIVING','QUEER VOICES','BUSINESS','SPORTS','COMEDY','PARENTS','BLACK VOICES','THE WORLDPOST','WOMEN','CRIME','MEDIA','WEIRD NEWS','GREEN','IMPACT','WORLDPOST','RELIGION','STYLE','WORLD NEWS','TRAVEL','TASTE','ARTS','FIFTY','GOOD NEWS','SCIENCE','ARTS & CULTURE','TECH','COLLEGE','LATINO VOICES','EDUCATION']
training_data = []
for i in range(0,len(data)):
    #print(data[i]['short_description']+' '+data[i]['headline'])
    #print(data[i]['category'])
    cate=data[i]['category']
    #print(category_list.index(cate))
    training_data.append({'data' : data[i]['short_description']+' '+data[i]['headline'], 'flag' : category_list.index(data[i]['category'])})
training_data[0]
#print(training_data)

training_data = pandas.DataFrame(training_data, columns=['data', 'flag'])
training_data.to_csv("train_data.csv", sep=',', encoding='utf-8')
print(training_data.data.size)

import pickle
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer

#for vector count
count_vect = CountVectorizer()
X_train_counts = count_vect.fit_transform(training_data.data)
#print(X_train_counts)
#save vector data
pickle.dump(count_vect.vocabulary_, open("count_vectorizer.pkl","wb"))

#transformation
tfidf_transformer = TfidfTransformer()
X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)
#print("transform")
#print(X_train_tfidf)
#save data
pickle.dump(tfidf_transformer, open("TfidfTransformer.pkl","wb"))

#softmax
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
clf_neural = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(15,), random_state=1)

X_train, X_test, y_train, y_test = train_test_split(X_train_tfidf, training_data.flag, test_size=0.20, random_state=42)

clf_neural.fit(X_train, y_train)

pickle.dump(clf_neural, open("softmax.pkl", "wb"))

predicted = clf_neural.predict(X_test)
result_softmax = pandas.DataFrame( {'true_labels': y_test,'predicted_labels': predicted})
result_softmax.to_csv('res_softmax.csv', sep = ',')

accuracy = clf_neural.score(X_test, y_test)
print("softmax accuracy",accuracy)

for predicted_item, result in zip(predicted, y_test):
    print(category_list[predicted_item], ' -- ', category_list[result])

from sklearn.metrics import classification_report
print('classification report of softmax')
print(classification_report(y_test, predicted, target_names=category_list))

#multinomial naive bayes
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_train_tfidf, training_data.flag, test_size=0.20, random_state=42)
clf = MultinomialNB().fit(X_train, y_train)

pickle.dump(clf, open("mnbmodel.pkl", "wb"))

loaded_vec = CountVectorizer(vocabulary=pickle.load(open("count_vectorizer.pkl", "rb")))
loaded_tfidf = pickle.load(open("TfidfTransformer.pkl","rb"))
loaded_model = pickle.load(open("mnbmodel.pkl","rb"))

predicted = loaded_model.predict(X_test)
result_bayes = pandas.DataFrame( {'true_labels': y_test,'predicted_labels': predicted})
result_bayes.to_csv('res_mnbayes.csv', sep = ',')

accuracy = loaded_model.score(X_test, y_test)
print("multinomial naive bayes accuracy",accuracy)

for predicted_item, result in zip(predicted, y_test):
    print(category_list[predicted_item], ' -- ', category_list[result])

from sklearn.metrics import classification_report
print('classification report of multinomial naive bayes')
print(classification_report(y_test, predicted, target_names=category_list))

#Support vector machine
from sklearn import svm
clf_svm = svm.LinearSVC()
X_train, X_test, y_train, y_test = train_test_split(X_train_tfidf, training_data.flag, test_size=0.20, random_state=42)
clf_svm.fit(X_train_tfidf, training_data.flag)
pickle.dump(clf_svm, open("svm.pkl", "wb"))

predicted = clf_svm.predict(X_test)
result_svm = pandas.DataFrame( {'true_labels': y_test,'predicted_labels': predicted})
result_svm.to_csv('res_svm.csv', sep = ',')


accuracy = clf_svm.score(X_test, y_test)
print("svm accuracy",accuracy)

for predicted_item, result in zip(predicted, y_test):
    print(category_list[predicted_item], ' -- ', category_list[result])

from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
print('classification report of Support vector machine')
print(classification_report(y_test, predicted, target_names=category_list))
print(accuracy_score(y_test, predicted, normalize=False))
from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_test, predicted))

#-Abhishek Shingadiya (abhishekshingadiya2543@gmail.com,7046685875,7048896523)